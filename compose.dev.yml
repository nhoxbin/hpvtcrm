services:
  # mkcert:
  #   image: alpine/mkcert:latest
  #   container_name: mkcert
  #   volumes:
  #     - ./docker/certs:/root/.local/share/mkcert
  #   command: sh -c "mkcert -install && mkcert hpvtcrm.local"
  #   restart: "no"

  web:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    # working_dir: /app
    environment:
      - NGINX_HOST=hpvtcrm.local
    ports:
      - 80:80
      # - 443:443
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
      # Mount the Nginx configuration file
      - ./docker/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Mount the SSL certificates
      # - ./docker/certs:/etc/nginx/certs:ro
    networks:
      - hpvtcrm-dev
    depends_on:
      php-fpm:
        condition: service_started  # Wait for php-fpm to start

  workspace:
   # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.
    build:
      context: .
      dockerfile: ./docker/development/workspace/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    ports:
      - '${VITE_PORT:-5173}:5173'
    tty: true  # Enables an interactive terminal
    stdin_open: true  # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    volumes:
      - ./:/var/www
    networks:
      - hpvtcrm-dev

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: development
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    env_file:
      # Load the environment variables from the Laravel application
      - .env
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
    networks:
      - hpvtcrm-dev
    depends_on:
      mysql:
        condition: service_started  # Wait for postgres to start

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "${DB_PORT:-3306}:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - mysql_data_development:/var/lib/mysql
    networks:
      - hpvtcrm-dev

  # postgres:
  #   image: postgres:16
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:5432"
  #   environment:
  #     - POSTGRES_DB=app
  #     - POSTGRES_USER=laravel
  #     - POSTGRES_PASSWORD=secret
  #   volumes:
  #     - postgres-data-development:/var/lib/postgresql/data
  #   networks:
  #     - hpvtcrm-dev

  redis:
    image: redis:alpine
    networks:
      - hpvtcrm-dev

networks:
  hpvtcrm-dev:

volumes:
  mysql_data_development:
  # postgres-data-development:
  # certs:
